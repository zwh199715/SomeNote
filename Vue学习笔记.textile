Vue 使用形式主要是 分为两部分
 1.Html部分
 2.js脚本部分
--------------------------------------------------------------------------------------------------------------
 <div id="app">
 	<!-- 这里就是Vue的Html部分 这个div中的DOM元素可以受到Vue的控制 -->
 	<span>{{message}}</span>
 </div>

 <script type="text/javascript">
 	/*

 	这里是创建了一个Vue的实例对象，它的构造函数需要一个对象 ，对象有很多重要的属性用来实现各种需求 最基础的是el属性
 	和data属性  data属性也是一个对象。
     
 	*/
 	var vm = Vue({
 		el:"#app", 
 		data:{message:"测试内容"}
 	});
 </script>
 ---------------------------------------------------------------------------------------------------------------

 Vue主要实现了脚本中的数据与DOM双向绑定,意思是当<span></span>中的内容改变的时候 脚本中data对象中的message属性的值也会变化 反之亦然。 

 注意： 只有data中提前有的属性才会动态响应，如果是后面加入的  比如  vm.message1="测试内容2"  同样用双括号取message2的内容那么不会对应的改变 反之亦然。

 object.freeze()方法可以取消掉data的动态响应。

 ---------------------------------------------------------------------------------------------------------------

 vm.$属性 = "xxx" 可以区分自己定义的属性 $表示vm的自己的属性

 常用方法 ：
 vm.$watch('a',function(newValue,oldValue){
 	  //用来观察变量a的变化情况 当vm.a发生变化时 调用此函数 并且得到变化前和变化后的a的结果
 });

 ---------------------------------------------------------------------------------------------------------------
 生命周期：
 在Vue实例被创建的时候需要很多流程  在不同的阶段提供了生命周期钩子的函数  即 当流程走到这个阶段的时候就会调用这个函数，这些函数中用户可以自己添加一些操作来满足自己的需求
 生命周期完整的钩子函数可以查看官方的API。
 生命周期函数声明是在Vue构造函数的对象中以属性的方式创建  XXX:function(){
 	xxxx;
 }

 ---------------------------------------------------------------------------------------------------------------
 插值的方法
 1.使用双大括号插入文本值{{xxx}}
 2.在某一个标签上如<p v-html="xxxx"></p> 的方法将xxxx对应的内容解释为<p></p>标签下的一个html文本
 3.为html标签绑定属性  v-bind:attr = "xxxx" 来为标签绑定属性  attr为标签的属性  xxxx为data中的属性
 4.模板表达式中可以使用js的表达式
 ---------------------------------------------------------------------------------------------------------------
 指令：
 带有v-前缀的特殊属性 
 常用的有： v-if  v-for v-bind:attr v-modle v-on 等
 指令的修饰符 是指令.xxx表示让指令以特殊的形式绑定

 条件渲染  v-if 为true渲染 为false则不渲染  不渲染的时候html中不存在DOM元素   对应的v-show 也是true是渲染  false是不渲染区别是v-show只是让DOM元素不显示 但是存在